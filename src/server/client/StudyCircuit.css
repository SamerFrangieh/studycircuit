body, html {
    margin: 0;
    padding: 0;
    height: 100%;
    font-family: 'Open Sans', Arial, sans-serif;
}

body {
    background-image: url(backLand.jpg); /* Replace with your image URL */
    background-size: cover;
    background-position: center;
    display: flex;
    justify-content: center;
    align-items: center;
    background-attachment: fixed;
}

.login-container {
    background-color: rgba(255, 255, 255, 0.95);
    padding: 40px 60px;
    border-radius: 15px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease-in-out;
}

.login-form h2 {
    color: #333;
    font-weight: 300;
    text-align: center;
    margin-bottom: 30px;
}

.form-group {
    position: relative;
    margin-bottom: 25px;
}

.form-group label {
    position: absolute;
    top: -14px;
    left: 10px;
    background-color: #fff;
    padding: 0 5px;
    font-size: 14px;
    color: #007bff;
}

.form-group input {
    width: 100%;
    padding: 12px;
    border: 2px solid #ddd;
    border-radius: 5px;
    font-size: 16px;
    transition: border-color 0.3s;
}

.form-group input:focus {
    outline: none;
    border-color: #007bff;
}

button {
    width: 100%;
    background-color: #007bff;
    color: white;
    padding: 12px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 18px;
    transition: background-color 0.3s;
}

button:hover {
    background-color: #0056b3;
}

/* Adding a little animation to the container */
.login-container:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
}
.welcome-message h1 {
    text-align: center;
    color: #007bff; /* Match this color to your design */
    margin-bottom: 20px; /* Adjust spacing as needed */
    font-size: 28px; /* Adjust font size as needed */
    font-weight: normal; /* Keeps the text less bold and more welcoming */
}
/* Existing CSS rules */

.forgot-password {
    text-align: center;
    margin-top: 20px;
}

.forgot-password a {
    color: #007bff; /* Adjust the color to fit your design */
    text-decoration: none; /* Optional: removes the underline */
}

.forgot-password a:hover {
    text-decoration: underline; /* Optional: adds underline on hover for clarity */
}

 //Server Code
const http = require("http") //need to http
const fs = require("fs") //need to read and write files
const url = require("url") //to parse url strings

const { handleRegistration } = require("./registration");

const ROOT_DIR = "client" //dir to serve static files from

const MIME_TYPES = {
  css: "text/css",
  gif: "image/gif",
  htm: "text/html",
  html: "text/html",
  ico: "image/x-icon",
  jpeg: "image/jpeg",
  jpg: "image/jpeg",
  js: "text/javascript", //should really be application/javascript
  json: "application/json",
  png: "image/png",
  svg: "image/svg+xml",
  txt: "text/plain"
}

function get_mime(filename) {
  //Get MIME type based on extension of requested file name
  //e.g. index.html --> text/html
  for (let ext in MIME_TYPES) {
    if (filename.indexOf(ext, filename.length - ext.length) !== -1) {
      return MIME_TYPES[ext]
    }
  }
  return MIME_TYPES["txt"]
}

http.createServer(function(request, response) {
    var urlObj = url.parse(request.url, true, false)

    console.log("\n============================")
    console.log("PATHNAME: " + urlObj.pathname)
    console.log("REQUEST: " + ROOT_DIR + urlObj.pathname)
    console.log("METHOD: " + request.method)

    var receivedData = ""

    //attached event handlers to collect the message data
    request.on("data", function(chunk) {
      receivedData += chunk
    })

    //event handler for the end of the message
    request.on("end", function() {
      //Handle the client POST requests
      //console.log('received data: ', receivedData);

    //If it is a POST request then we will check the data.
    if (request.method === "POST") {
        //Do this for all POST messages
        var dataObj = JSON.parse(receivedData)
        console.log("received data object: ", dataObj)
        console.log("type: ", typeof dataObj)
        console.log("USER REQUEST: " + dataObj.text)
        var returnObj = {}
        returnObj.text = "NOT FOUND: " + dataObj.text
      }


     if (request.method === "POST" && urlObj.pathname === "/register") {
        // Direct POST /register requests to the handleRegistration function
        handleRegistration(request, response);
     }
    //  else if (request.method === "POST") {
    //     //Not found or unknown POST request
    //     var returnObj = {};
    //     returnObj.text = "UNKNOWN REQUEST"
    //     response.writeHead(200, { "Content-Type": MIME_TYPES["json"] })
    //     response.end(JSON.stringify(returnObj))

    //   } 
      else if (request.method == "GET") {
        //handle GET requests as static file requests
        var filePath = ROOT_DIR + urlObj.pathname
        if (urlObj.pathname === "/")  { filePath = ROOT_DIR + "/studycircuit.html" }

        fs.readFile(filePath, function(err, data) {
          if (err) {
            //report error to console
            console.log("ERROR: " + JSON.stringify(err))
            //respond with not found 404 to client
            response.writeHead(404);
            response.end(JSON.stringify(err))
            return
          }
          response.writeHead(200, { "Content-Type": get_mime(filePath) })
          response.end(data)
        })
      }
      else {
        // Handle unsupported methods
        response.writeHead(405);
        response.end(JSON.stringify({error: "Method Not Allowed"}));
    }
    })
  })
  .listen(3000)

  console.log("Server Running at PORT 3000  CNTL-C to quit")
  console.log("To Test")
  console.log("http://localhost:3000/studycircuit.html") 